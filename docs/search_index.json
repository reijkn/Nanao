[
["index.html", "R as a GIS 1 はじめに 2 前準備 2.1 ライブラリの読み込み 2.2 国土数値情報から 2.3 openstreetmapから 3 土砂災害警戒区域状に限定する 4 距離を算出する", " R as a GIS 2019/5/7 1 はじめに RをGISとして使う． ポリゴンオブジェクト上に位置するラインオブジェクトの延長を算出する． それぞれ以下のようにする． ポリゴン：土砂災害警戒区域 ライン：道路 土砂災害警戒区域上に位置する道路を特定し，その延長を計算することで防災政策を立案するうえでの一つの判断材料を与える． 2 前準備 使用するライブラリの読み込み，国土数値情報からのダウンロード，openstreetmapからのダウンロードを行う． 2.1 ライブラリの読み込み library(sf) library(tidyverse) library(tmap) library(mapview) 2.2 国土数値情報から 石川県のやつについて，以下を読み込む． 行政区域：N03~ 緊急輸送道路：N10-15~ 土砂災害警戒区域：A33-17~ コードは以下のとおりである． # 日本語を扱うのでCP932でのエンコードを忘れない isikawa &lt;- st_read(&quot;N03-170101_17_GML/N03-17_17_170101.shp&quot;, options = &quot;ENCODING=CP932&quot;, stringsAsFactors=F) emergency &lt;- st_read(&quot;N10-15_17_GML/N10-15_17.shp&quot;, options = &quot;ENCODING=CP932&quot;, stringsAsFactors=F) sediment &lt;- st_read(&quot;A33-17_17_GML/A33-17_17_GML/A33-17_17Polygon.shp&quot;, options = &quot;ENCODING=CP932&quot;, stringsAsFactors=F) N03_004が市町村名に相当する． ここを七尾市に指定すればよさそうである． nanao &lt;- isikawa %&gt;% filter(N03_004 == &quot;七尾市&quot;) ## Warning: package &#39;bindrcpp&#39; was built under R version 3.4.4 行政区域を七尾市のみに絞ったものができた． このポリゴン上で，道路とか土砂災害警戒区域を絞り込む． emergency_nanao &lt;- st_intersection(nanao, emergency) sediment_nanao &lt;- st_intersection(nanao, sediment) そして投影座標系をEPSG2449とする． nanao &lt;- st_transform(nanao, 2449) emergency_nanao &lt;- st_transform(emergency_nanao, 2449) sediment_nanao &lt;- st_transform(sediment_nanao, 2449) mapview()を使ってインタラクティブに確認する． 車線名（国道n号など）に応じて道路の色を変更する． mapview(nanao) + mapview(emergency_nanao, zcol = &quot;N10_004&quot;) #colnames(emergency_nanao) 2.3 openstreetmapから 七尾市周辺のbboxについて，以下を読み込む． morotway trunk primary secondary tertialy unclassified residential openstreetmapのapiをつかう． pythonのラッパーがあるので，それを使用する． Rからpythonを呼び出すにはこのパッケージをつかう． bboxの範囲は(36.964677, 136.772596,37.198499, 137.070257)である． pythonを使う下準備は次の通りとなる． reticulate::use_python(Sys.which(names = &quot;python&quot;)) opass &lt;- reticulate::import(module = &quot;overpass&quot;) api = opass$API() # Rからは$で潜っていく． たくさん作るので，関数にしておく geojson_as_sf &lt;- function(way_attr){ # way_attr は文字列 bound_box &lt;- &quot;36.964677, 136.772596,37.198499, 137.070257&quot; query_opass &lt;- str_c(&#39;way[&quot;highway&quot;=&quot;&#39;,way_attr,&#39;&quot;](&#39;,bound_box,&#39;);(._;&gt;;)&#39;) attr_api &lt;- api$get(query_opass, verbosity = &#39;geom&#39;) way_sf_NodeWay &lt;- st_as_sf(st_read(attr_api)) way_sf &lt;- way_sf_NodeWay %&gt;% filter(highway == way_attr) way_sf &lt;- st_transform(way_sf, 2449) # 4326から2449にする } 道路属性ごとに異なるsfオブジェクトを生成する． 道路属性を文字列として格納しgeojson -&gt; sf する． # やたらと出力が長くなる． message = F だとhtml出力が止まる． attr_str &lt;- c(&quot;motorway&quot;, &quot;trunk&quot;, &quot;primary&quot;, &quot;secondary&quot;, &quot;tertiary&quot;, &quot;unclassified&quot;, &quot;residential&quot;) for (i in attr_str) { now_sf &lt;- str_c(i, &quot;_sf&quot;) assign(now_sf, geojson_as_sf(i)) } バウンディボックスは矩形であり，七尾市の外側の道路も取得している． これを七尾市上のみに絞り込む． for (i in attr_str) { now_sf &lt;- str_c(i, &quot;_sf&quot;) nanao_sf &lt;- str_c(i, &quot;_nanao&quot;) # 道路のsfについて 七尾市だけのものをこれに格納する assign(nanao_sf, st_intersection(nanao, get(now_sf))) # nanao_sf &lt;- st_intersection(nanao, atr_sf) とするのをまあ } 最終的に，全道路属性が1つのデータフレームにまとまっているsfオブジェクトを生成する． 現時点ではまだ，道路属性ごとに異なるsfオブジェクトである． これを以下の手順でひとまとめにする． 道路属性個数分だけあるsfオブジェクトをデータフレームとsfcオブジェクトに分解． 1.で，道路属性個数分のデータフレームができたので，それをひとまとめにする． 1.で，道路属性個数分のsfcオブジェクトができたので，それをひとまとめにする． sfをつくる．2.でできた1つのデータフレームと，3.でできた1つのsfcをくっつける 分解作業，すぐおわる． for(i in attr_str){ now_nanao &lt;- str_c(i, &quot;_nanao&quot;) # データフレームだけを now_df に格納 now_df &lt;- str_c(i, &quot;_df&quot;) assign(now_df, st_set_geometry(get(now_nanao), NULL)) # sfc だけを now_sfc に格納 now_sfc &lt;- str_c(i, &quot;_sfc&quot;) assign(now_sfc, st_geometry(get(now_nanao))) } bind_rowにより，道路属性ごとのデータフレームを下に付け足す． # 格納用のデータフレームを作って，それにバインドしていく Road_attr_df &lt;- data.frame() for(i in attr_str){ now_df &lt;- get(str_c(i, &quot;_df&quot;)) # ここでget()すれば1行でデータフレームになる Road_attr_df &lt;- bind_rows(Road_attr_df, now_df) } sfcも全道路属性をひとまとめにする． リストに格納する． # 空のリストに放り込む Road_sfc &lt;- list() for (i in attr_str) { now_sfc &lt;- get(str_c(i, &quot;_sfc&quot;)) # ここでget()すれば1行で sfc Road_sfc &lt;- c(Road_sfc, i = now_sfc) } sfオブジェクトをつくる． Road_sf &lt;- st_sf(Road_attr_df, geometry = Road_sfc) Road_sf &lt;- st_set_crs(Road_sf, 2449) # 本当は上のやつでいっしょにしたい 道路属性ごとに色分けして図化する． mapview(nanao) + mapview(Road_sf, zcol = &quot;highway&quot;) 3 土砂災害警戒区域状に限定する 4 距離を算出する "]
]
